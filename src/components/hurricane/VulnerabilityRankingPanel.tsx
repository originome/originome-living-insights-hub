
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { AlertTriangle, Zap, Shield, Clock } from "lucide-react";

interface VulnerabilityAsset {
  id: string;
  name: string;
  type: 'substation' | 'feeder_line' | 'transformer' | 'transmission_tower';
  latitude: number;
  longitude: number;
  riskScore: number;
  failureProbability: number;
  criticalFactors: string[];
  recommendedPlaybook: string;
}

interface VulnerabilityRankingPanelProps {
  vulnerabilityData: VulnerabilityAsset[];
  onAssetSelect: (assetId: string) => void;
  selectedAsset: string | null;
}

const VulnerabilityRankingPanel: React.FC<VulnerabilityRankingPanelProps> = ({
  vulnerabilityData,
  onAssetSelect,
  selectedAsset
}) => {
  const sortedAssets = [...vulnerabilityData].sort((a, b) => b.riskScore - a.riskScore);
  const criticalAssets = sortedAssets.filter(asset => asset.riskScore >= 80);
  const highRiskAssets = sortedAssets.filter(asset => asset.riskScore >= 60 && asset.riskScore < 80);

  const getRiskColor = (score: number) => {
    if (score >= 80) return 'bg-red-100 text-red-800 border-red-300';
    if (score >= 60) return 'bg-orange-100 text-orange-800 border-orange-300';
    if (score >= 40) return 'bg-yellow-100 text-yellow-800 border-yellow-300';
    return 'bg-green-100 text-green-800 border-green-300';
  };

  const getRiskIcon = (score: number) => {
    if (score >= 80) return <AlertTriangle className="h-4 w-4 text-red-600 animate-pulse" />;
    if (score >= 60) return <AlertTriangle className="h-4 w-4 text-orange-600" />;
    if (score >= 40) return <Shield className="h-4 w-4 text-yellow-600" />;
    return <Shield className="h-4 w-4 text-green-600" />;
  };

  const getAssetTypeIcon = (type: string) => {
    switch (type) {
      case 'substation': return <Zap className="h-4 w-4" />;
      case 'transformer': return <Zap className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };

  return (
    <Card className="h-[600px] flex flex-col">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center space-x-2">
          <AlertTriangle className="h-5 w-5 text-red-600" />
          <span>Asset Vulnerability Rankings</span>
        </CardTitle>
        <div className="flex space-x-4 text-sm">
          <Badge variant="destructive" className="text-xs">
            {criticalAssets.length} Critical
          </Badge>
          <Badge variant="secondary" className="text-xs bg-orange-100 text-orange-800">
            {highRiskAssets.length} High Risk
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="flex-1 overflow-y-auto space-y-3 p-4">
        {sortedAssets.slice(0, 20).map((asset, index) => (
          <div
            key={asset.id}
            className={`border rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${
              selectedAsset === asset.id ? 'ring-2 ring-blue-500 bg-blue-50' : 'bg-white'
            }`}
            onClick={() => onAssetSelect(asset.id)}
          >
            <div className="flex items-start justify-between mb-2">
              <div className="flex items-center space-x-2">
                <div className="text-sm font-bold text-slate-600">#{index + 1}</div>
                {getAssetTypeIcon(asset.type)}
                <div>
                  <div className="font-semibold text-sm text-slate-900">{asset.name}</div>
                  <div className="text-xs text-slate-600 capitalize">
                    {asset.type.replace('_', ' ')}
                  </div>
                </div>
              </div>
              <div className="text-right">
                <div className="flex items-center space-x-2 mb-1">
                  {getRiskIcon(asset.riskScore)}
                  <Badge className={`text-xs border ${getRiskColor(asset.riskScore)}`}>
                    RISK: {asset.riskScore}
                  </Badge>
                </div>
                <div className="text-xs text-slate-600">
                  {asset.failureProbability}% failure probability
                </div>
              </div>
            </div>
            
            <div className="mb-3">
              <div className="text-xs font-medium text-slate-700 mb-1">Critical Factors:</div>
              <div className="text-xs text-slate-600 leading-relaxed">
                {asset.criticalFactors.slice(0, 2).join(' • ')}
                {asset.criticalFactors.length > 2 && ' • ...'}
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="text-xs text-slate-500">
                Playbook: {asset.recommendedPlaybook.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
              </div>
              <Button variant="ghost" size="sm" className="h-6 px-2 text-xs">
                View Details
              </Button>
            </div>
          </div>
        ))}
        
        {sortedAssets.length === 0 && (
          <div className="text-center py-8 text-slate-500">
            <Shield className="h-12 w-12 mx-auto mb-4 text-slate-300" />
            <div className="text-sm font-medium">No vulnerability data available</div>
            <div className="text-xs">Check data connections and storm tracking</div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityRankingPanel;
